17: Understanding text-index

Important for searching!

Text index splits up the words and removes all the stopwords such as (the, in, of, etc) and stores every word of value as stem word in lowercase.

CREATING TEXT INDEX:

createIndex({field:"text"})

For e.g:

createIndex({"description":"text"}) where the description is the field.

Note:
You can use text-index only on one field / collection.(so that field should possibly be in every document in collection).
However, you can merge multiple fields while creating text-index.

createIndex({field1:"text", field2:"text"})

Here, the text-index will still be one but it will include keywords of both fields, indvidually.


Searching using the index:

find({$text:{$search:"keywords"}})

note: no need to specify the field "description" as text-index is done only on one field that is self-understood my mongodb.


find({$text:{$search:"red book"}})

Here red and books are both different keywords not one means it will search all docs in index where 'red' and 'book' appears individually.

If 'red' appears in doc that is of 'T-shirt', it will be returned as well. 

But you can sort results as relevance score, find below in next video.


To search for specific phrase: use escape sequences

find({$text:{$search:"\"red book\""}})

Now it will search for docs where full 'red book' appears.

-------------------------------------------------------------------
18: Text indexes and sorting

Very important: Sorting results according to score of searches

Suppose you have two docs and in each 'description' is as following.

Doc1: This T-shirt is red and it's pretty awesome.
Doc2: This is an awesome book about a young artist.

now,  the search keyword is "awesome t-shirt" and 'awesome' appears in both documents, so both will be returned.

But, intuitively, as per the search keyword: Doc1 is more relevant as it includes both 'awesome' and 't-shirt', so it should appear first in search results.

to do that: use projection like this

find({$text:{$search:"awesome t-shirt"}}, {score:{$meta: "textScore"})

it will automatically sort the results based on 'score' field.

You may enforce it to sort: using standard 'sort' function:

find({$text:{$search:"awesome t-shirt"}}, {score:{$meta: "textScore"}).sort({score:{$meta: "textScore"})
------------------------------------------------------------------------------------------
Very helpful:

20: Excluding/ruling out words while searching (words that are in undesired docs)

use '-' (minus) sign

find({$text:{$search:"awesome -bag"}})

Now it will result the docs that have awesome but omit the docs that have 'bag' as well.

--------------------------------------------------------------------------------------------

21: Defining weights for fields in index (important for searching on multiple fields)

createIndex({field1:"text", field2:"text"}, weights:{field1:x, field2:y})

where x, y are numbered weights such as 1, 2, 3, 5 , 10


E.g. 

createIndex({title:"text", description:"text"}, weights:{title:1, description:10})

Now, the field 'description' will be given 10 times much weight while creating scores.

---
Setting default language:

createIndex({title:"text", description:"text"}, {default_language:"english"})
createIndex({title:"text", description:"text"}, {default_language:"german"})

the language you specify, it will remove the stop words and do stemming for the words of the languge.

--

Setting language and other fields while searching:

find({$text:{$search:"red"}}, {$language:"english"})

setting case sensitivensess:

find({$text:{$search:"red"}}, {$caseSensitive:true})














